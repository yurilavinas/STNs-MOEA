?duplicated
source("~/Documents/estudos/STNs-MOEA/scripts/STN_create.R")
?duplicated
x <- c(9:20, 1:5, 3:7, 0:8)
x
xu <- x[!duplicated(x)]
xu
x[!duplicated(x, fromLast = TRUE)]
duplicated(x, fromLast = TRUE)
x[duplicated(x, fromLast = TRUE)]
duplicated(x, fromLast = TRUE)
source("~/Documents/estudos/STNs-MOEA/scripts/generate_for_STN_continuous.R")
source("~/Documents/estudos/STNs-MOEA/scripts/STN_create.R")
source("~/Documents/estudos/STNs-MOEA/scripts/run_algorithms_benchmark.R")
getwd()
setwd('scripts')
source("~/Documents/estudos/STNs-MOEA/scripts/run_algorithms_benchmark.R")
out
source("~/Documents/estudos/STNs-MOEA/algorithms/nsga2.R")
out <-
nsga2(
X = X,
problem = problem,
varNo = dimensions,
objDim = n.obj,
maxeval = maxeval,
lowerBounds = as.numeric(ParamHelpers::getLower(par.set)),
upperBounds = as.numeric(ParamHelpers::getUpper(par.set)),
popSize = popSize,
tourSize = 2,
cprob = 0.9,
XoverDistIdx = 20,
mprob = 0.1,
MuDistIdx = 3,
scaling = T,
saving.dir = dir.name
)
source("~/Documents/estudos/STNs-MOEA/scripts/generate_for_STN_continuous.R")
getwd()
setwd("scripts")
source("~/Documents/estudos/STNs-MOEA/scripts/generate_for_STN_continuous.R")
source("~/Documents/estudos/STNs-MOEA/scripts/STN_create.R")
data_files
# Create STNs for all files in the folder
nnodes <- lapply(data_files[1], create_stn)
source("~/Documents/estudos/STNs-MOEA/scripts/STN_create.R")
# Create STNs for all files in the folder
nnodes <- lapply(data_files[1], create_stn)
nnodes <- lapply(data_files[11], create_stn)
barplot(as.numeric(unlist(nnodes))) # Plot number of nodes as check
source("~/Documents/estudos/STNs-MOEA/scripts/STN_create.R")
source("~/Documents/estudos/STNs-MOEA/scripts/STN_create.R")
data_files
source("~/Documents/estudos/STNs-MOEA/scripts/generate_for_STN_continuous.R")
source("~/Documents/estudos/STNs-MOEA/scripts/STN_create.R")
source("~/Documents/estudos/STNs-MOEA/scripts/STN_create.R")
setwd("scripts/")
source("~/Documents/estudos/STNs-MOEA/scripts/STN_create.R")
source("~/Documents/estudos/STNs-MOEA/scripts/STN_plot.R")
source("~/Documents/estudos/STNs-MOEA/algorithms/resource_allocation_init.R")
source("~/Documents/estudos/STNs-MOEA/scripts/run_algorithms_benchmark.R")
getwd()
setwd('scripts')
source("~/Documents/estudos/STNs-MOEA/scripts/run_algorithms_benchmark.R")
out1
update
out1 <- moeadps(
X = X,
preset   = preset_moead("moead.de"),
problem  = problem,
saving.dir = dir.name,
decomp = decomp2,
scaling = scaling,
update = update,
showpars = list(show.iters = "dots", showevery = 1000),
stopcrit = list(list(name    = "maxeval",
maxeval = maxeval))
)
source("~/Documents/estudos/STNs-MOEA/algorithms/moeadps.R")
out1 <- moeadps(
X = X,
preset   = preset_moead("moead.de"),
problem  = problem,
saving.dir = dir.name,
decomp = decomp2,
scaling = scaling,
update = update,
showpars = list(show.iters = "dots", showevery = 1000),
stopcrit = list(list(name    = "maxeval",
maxeval = maxeval))
)
source("~/Documents/estudos/STNs-MOEA/algorithms/moeadps.R")
out1 <- moeadps(
X = X,
preset   = preset_moead("moead.de"),
problem  = problem,
saving.dir = dir.name,
decomp = decomp2,
scaling = scaling,
update = update,
showpars = list(show.iters = "dots", showevery = 1000),
stopcrit = list(list(name    = "maxeval",
maxeval = maxeval))
)
source("~/Documents/estudos/STNs-MOEA/algorithms/moeadps.R")
out1 <- moeadps(
X = X,
preset   = preset_moead("moead.de"),
problem  = problem,
saving.dir = dir.name,
decomp = decomp2,
scaling = scaling,
update = update,
showpars = list(show.iters = "dots", showevery = 1000),
stopcrit = list(list(name    = "maxeval",
maxeval = maxeval))
)
source("~/Documents/estudos/STNs-MOEA/algorithms/moeadps.R")
source("~/Documents/estudos/STNs-MOEA/algorithms/moeadps.R")
out1 <- moeadps(
X = X,
preset   = preset_moead("moead.de"),
problem  = problem,
saving.dir = dir.name,
decomp = decomp2,
scaling = scaling,
update = update,
showpars = list(show.iters = "dots", showevery = 1000),
stopcrit = list(list(name    = "maxeval",
maxeval = maxeval))
)
source("~/Documents/estudos/STNs-MOEA/algorithms/moeadps.R")
out1 <- moeadps(
X = X,
preset   = preset_moead("moead.de"),
problem  = problem,
saving.dir = dir.name,
decomp = decomp2,
scaling = scaling,
update = update,
showpars = list(show.iters = "dots", showevery = 1000),
stopcrit = list(list(name    = "maxeval",
maxeval = maxeval))
)
source("~/Documents/estudos/STNs-MOEA/algorithms/moeadps.R")
out1 <- moeadps(
X = X,
preset   = preset_moead("moead.de"),
problem  = problem,
saving.dir = dir.name,
decomp = decomp2,
scaling = scaling,
update = update,
showpars = list(show.iters = "dots", showevery = 1000),
stopcrit = list(list(name    = "maxeval",
maxeval = maxeval))
)
source("~/Documents/estudos/STNs-MOEA/algorithms/moeadps.R")
out1 <- moeadps(
X = X,
preset   = preset_moead("moead.de"),
problem  = problem,
saving.dir = dir.name,
decomp = decomp2,
scaling = scaling,
update = update,
showpars = list(show.iters = "dots", showevery = 1000),
stopcrit = list(list(name    = "maxeval",
maxeval = maxeval))
)
source("~/Documents/estudos/STNs-MOEA/scripts/run_algorithms_benchmark.R")
update
source("~/Documents/estudos/STNs-MOEA/scripts/run_algorithms_benchmark.R")
source("~/Documents/estudos/STNs-MOEA/scripts/run_algorithms_benchmark.R")
out <-
nsgaps(
X = X,
problem = problem,
varNo = dimensions,
objDim = n.obj,
maxeval = maxeval,
lowerBounds = as.numeric(ParamHelpers::getLower(par.set)),
upperBounds = as.numeric(ParamHelpers::getUpper(par.set)),
popSize = popSize,
tourSize = 2,
cprob = 0.9,
XoverDistIdx = 20,
mprob = 0.1,
MuDistIdx = 3,
scaling = T,
saving.dir = dir.name
)
dir.name
write.table(
colname,
paste0(dir.name, "/all_solutions.csv"),
sep = ',',
col.names = F,
row.names = F
)
dir.name <- paste0(inpath, "algorithm_data/nsga2_", f, "/")
if (!dir.exists(dir.name)) {
dir.create(dir.name)
if (!file.exists(paste0(dir.name, "/all_solutions.csv"))) {
colname = c(paste0("X", 1:length(problem$xmin)),
paste0('Y', 1:problem$m),
'iter',
'nfe',
'run')
colname = t(as.data.frame(colname))
write.table(
colname,
paste0(dir.name, "/all_solutions.csv"),
sep = ',',
col.names = F,
row.names = F
)
}
}
print("NSGA-II")
out <-
nsgaps(
X = X,
problem = problem,
varNo = dimensions,
objDim = n.obj,
maxeval = maxeval,
lowerBounds = as.numeric(ParamHelpers::getLower(par.set)),
upperBounds = as.numeric(ParamHelpers::getUpper(par.set)),
popSize = popSize,
tourSize = 2,
cprob = 0.9,
XoverDistIdx = 20,
mprob = 0.1,
MuDistIdx = 3,
scaling = T,
saving.dir = dir.name
)
decomp2    <-
list(name       = "sld", H = 21) # <-- H = 99 in the original
W2  <- generate_weights(decomp = decomp2,
m      = 3)
W2
decomp2    <-
list(name       = "sld", H = 13) # <-- H = 99 in the original
W2  <- generate_weights(decomp = decomp2,
m      = 3)
W2
decomp2    <-
list(name       = "sld", H = 12) # <-- H = 99 in the original
W2  <- generate_weights(decomp = decomp2,
m      = 3)
W2
decomp2    <-
list(name       = "uniform", H = popSize) # <-- H = 99 in the original
W2  <- generate_weights(decomp = decomp2,
m      = n.obj)
decomp2    <-
list(name       = "uniform", N = popSize) # <-- H = 99 in the original
W2  <- generate_weights(decomp = decomp2,
m      = n.obj)
popSize
popSize <- 100
decomp2    <-
list(name       = "uniform", N = popSize) # <-- H = 99 in the original
W2  <- generate_weights(decomp = decomp2,
m      = n.obj)
W2
W2  <- generate_weights(decomp = decomp2,
m      = 3)
X  <- create_population(N       = nrow(W2),
problem = problem)
W2
source("~/Documents/estudos/STNs-MOEA/scripts/run_algorithms_benchmark.R")
dir.name <- paste0(inpath, "algorithm_data/nsga2_", f, "/")
if (!dir.exists(dir.name)) {
dir.create(dir.name)
if (!file.exists(paste0(dir.name, "/all_solutions.csv"))) {
colname = c(paste0("X", 1:length(problem$xmin)),
paste0('Y', 1:problem$m),
'iter',
'nfe',
'run')
colname = t(as.data.frame(colname))
write.table(
colname,
paste0(dir.name, "/all_solutions.csv"),
sep = ',',
col.names = F,
row.names = F
)
}
}
print("NSGA-II")
out <-
nsga2(
X = X,
problem = problem,
varNo = dimensions,
objDim = n.obj,
maxeval = maxeval,
lowerBounds = as.numeric(ParamHelpers::getLower(par.set)),
upperBounds = as.numeric(ParamHelpers::getUpper(par.set)),
popSize = popSize,
tourSize = 2,
cprob = 0.9,
XoverDistIdx = 20,
mprob = 0.1,
MuDistIdx = 3,
scaling = T,
saving.dir = dir.name
)
nsga2
source("~/Documents/estudos/STNs-MOEA/algorithms/nsga2.R")
out <-
nsga2(
X = X,
problem = problem,
varNo = dimensions,
objDim = n.obj,
maxeval = maxeval,
lowerBounds = as.numeric(ParamHelpers::getLower(par.set)),
upperBounds = as.numeric(ParamHelpers::getUpper(par.set)),
popSize = popSize,
tourSize = 2,
cprob = 0.9,
XoverDistIdx = 20,
mprob = 0.1,
MuDistIdx = 3,
scaling = T,
saving.dir = dir.name
)
nsga2
source("~/Documents/estudos/STNs-MOEA/scripts/run_algorithms_benchmark.R")
source("~/Documents/estudos/STNs-MOEA/algorithms/nsga2.R")
dir.name <- paste0(inpath, "algorithm_data/nsga2_", f, "/")
if (!dir.exists(dir.name)) {
dir.create(dir.name)
if (!file.exists(paste0(dir.name, "/all_solutions.csv"))) {
colname = c(paste0("X", 1:length(problem$xmin)),
paste0('Y', 1:problem$m),
'iter',
'nfe',
'run')
colname = t(as.data.frame(colname))
write.table(
colname,
paste0(dir.name, "/all_solutions.csv"),
sep = ',',
col.names = F,
row.names = F
)
}
}
print("NSGA-II")
out <-
nsga(
X = X,
problem = problem,
varNo = dimensions,
objDim = n.obj,
maxeval = maxeval,
lowerBounds = as.numeric(ParamHelpers::getLower(par.set)),
upperBounds = as.numeric(ParamHelpers::getUpper(par.set)),
popSize = popSize,
tourSize = 2,
cprob = 0.9,
XoverDistIdx = 20,
mprob = 0.1,
MuDistIdx = 3,
scaling = T,
saving.dir = dir.name
)
source("~/Documents/estudos/STNs-MOEA/algorithms/nsga2.R")
source("~/Documents/estudos/STNs-MOEA/algorithms/nsga2.R")
out <-
nsga2(
X = X,
problem = problem,
varNo = dimensions,
objDim = n.obj,
maxeval = maxeval,
lowerBounds = as.numeric(ParamHelpers::getLower(par.set)),
upperBounds = as.numeric(ParamHelpers::getUpper(par.set)),
popSize = popSize,
tourSize = 2,
cprob = 0.9,
XoverDistIdx = 20,
mprob = 0.1,
MuDistIdx = 3,
scaling = T,
saving.dir = dir.name
)
source("~/Documents/estudos/STNs-MOEA/algorithms/nsga2.R")
out <-
nsga2(
X = X,
problem = problem,
varNo = dimensions,
objDim = n.obj,
lowerBounds = as.numeric(ParamHelpers::getLower(par.set)),
upperBounds = as.numeric(ParamHelpers::getUpper(par.set)),
popSize = popSize,
tourSize = 2,
maxeval = maxeval,
cprob = 0.9,
XoverDistIdx = 20,
mprob = 0.1,
MuDistIdx = 3,
scaling = T,
saving.dir = dir.name
)
source("~/Documents/estudos/STNs-MOEA/algorithms/nsga2.R")
out <-
nsga2(
X = X,
problem = problem,
varNo = dimensions,
objDim = n.obj,
lowerBounds = as.numeric(ParamHelpers::getLower(par.set)),
upperBounds = as.numeric(ParamHelpers::getUpper(par.set)),
popSize = popSize,
tourSize = 2,
maxeval = maxeval,
cprob = 0.9,
XoverDistIdx = 20,
mprob = 0.1,
MuDistIdx = 3,
scaling = T,
saving.dir = dir.name
)
update <- preset_moead("moead.de")$update
library(MOEADr)
update <- preset_moead("moead.de")$update
update
source("~/Documents/estudos/STNs-MOEA/scripts/run_algorithms_benchmark.R")
source("~/Documents/estudos/STNs-MOEA/algorithms/moead.R")
source("~/Documents/estudos/STNs-MOEA/scripts/run_algorithms_benchmark.R")
getwd()
setwd('scripts')
source("~/Documents/estudos/STNs-MOEA/scripts/run_algorithms_benchmark.R")
source("~/Documents/estudos/STNs-MOEA/algorithms/moead.R")
out1 <- moead(
X = X,
preset   = preset_moead("moead.de"),
problem  = problem,
saving.dir = dir.name,
decomp = decomp2,
update  =update,
showpars = list(show.iters = "dots", showevery = 1000),
stopcrit = list(list(name    = "maxeval",
maxeval = maxeval))
)
p
out1 <- moead(
X = X,
preset   = preset_moead("moead.de"),
problem  = problem,
saving.dir = dir.name,
decomp = decomp2,
update  =update,
showpars = list(show.iters = "dots", showevery = 1000),
stopcrit = list(list(name    = "maxeval",
maxeval = maxeval))
)
dir.name <- paste0(inpath, "algorithm_data/moead_", f, "/")
if (!dir.exists(dir.name)) {
dir.create(dir.name)
if (!file.exists(paste0(dir.name, "/all_solutions.csv"))) {
colname = c(paste0("X", 1:length(problem$xmin)),
paste0('Y', 1:problem$m),
'iter',
'nfe',
'run')
colname = t(as.data.frame(colname))
write.table(
colname,
paste0(dir.name, "/all_solutions.csv"),
sep = ',',
col.names = F,
row.names = F
)
}
}
out1 <- moead(
X = X,
preset   = preset_moead("moead.de"),
problem  = problem,
saving.dir = dir.name,
decomp = decomp2,
update  =update,
showpars = list(show.iters = "dots", showevery = 1000),
stopcrit = list(list(name    = "maxeval",
maxeval = maxeval))
)
out <-
nsga2(
X = X,
problem = problem,
varNo = dimensions,
objDim = n.obj,
lowerBounds = as.numeric(ParamHelpers::getLower(par.set)),
upperBounds = as.numeric(ParamHelpers::getUpper(par.set)),
popSize = popSize,
tourSize = 2,
maxeval = maxeval,
cprob = 0.9,
XoverDistIdx = 20,
mprob = 0.1,
MuDistIdx = 3,
saving.dir = dir.name
)
